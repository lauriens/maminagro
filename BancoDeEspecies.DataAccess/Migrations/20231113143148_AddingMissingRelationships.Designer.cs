// <auto-generated />
using System;
using BancoDeEspecies.DataAccess.Configurations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BancoDeEspecies.DataAccess.Migrations
{
    [DbContext(typeof(BancoDeEspeciesDbContext))]
    [Migration("20231113143148_AddingMissingRelationships")]
    partial class AddingMissingRelationships
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Abundance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AbundanceValue")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("LandscapeId")
                        .HasColumnType("integer");

                    b.Property<int?>("OccurrenceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LandscapeId");

                    b.HasIndex("OccurrenceId");

                    b.ToTable("Abundances", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Anthrome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Anthromes", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.AreaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("AreaTypes", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Biome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Biomes", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.BiomeLandscape", b =>
                {
                    b.Property<int>("BiomeId")
                        .HasColumnType("integer");

                    b.Property<int>("LandscapeId")
                        .HasColumnType("integer");

                    b.HasKey("BiomeId", "LandscapeId");

                    b.HasIndex("LandscapeId");

                    b.ToTable("BiomeLandscapes", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("PhylumId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PhylumId");

                    b.ToTable("Classes", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContinentName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Culture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CommonName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("LandscapeId")
                        .HasColumnType("integer");

                    b.Property<string>("Phenology")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<decimal?>("PlantedArea")
                        .HasColumnType("numeric");

                    b.Property<int?>("SpecieId")
                        .HasColumnType("integer");

                    b.Property<int?>("SpeciesType")
                        .HasColumnType("integer");

                    b.Property<int?>("TimeSincePlanting")
                        .HasColumnType("integer");

                    b.Property<int>("TimeSincePlantingUnit")
                        .HasColumnType("integer");

                    b.Property<string>("Variety")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LandscapeId");

                    b.HasIndex("SpecieId");

                    b.ToTable("Cultures", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.CultureSpecie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("GenusId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("GenusId");

                    b.ToTable("CultureSpecies", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Domain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Domains", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Family", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("OrderId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Families", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Genus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("FamilyId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.ToTable("Genera", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Kingdom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DomainId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.ToTable("Kingdoms", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Landscape", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Agroecosystem")
                        .HasColumnType("integer");

                    b.Property<int?>("AnthromeId")
                        .HasColumnType("integer");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<bool?>("IsProtectedArea")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Radius")
                        .HasColumnType("numeric");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("integer");

                    b.Property<int?>("SampleAreaTypeId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnthromeId");

                    b.HasIndex("ReferenceId");

                    b.HasIndex("SampleAreaTypeId");

                    b.ToTable("Landscapes", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.LandscapeAreaType", b =>
                {
                    b.Property<int>("AreaTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("LandscapeId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Percentage")
                        .HasColumnType("numeric");

                    b.HasKey("AreaTypeId", "LandscapeId");

                    b.HasIndex("LandscapeId");

                    b.ToTable("LandscapeAreaTypes", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.LandscapeMunicipality", b =>
                {
                    b.Property<int>("MunicipalityId")
                        .HasColumnType("integer");

                    b.Property<int>("LandscapeId")
                        .HasColumnType("integer");

                    b.HasKey("MunicipalityId", "LandscapeId");

                    b.HasIndex("LandscapeId");

                    b.ToTable("LandscapeMunicipalities");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.LandscapeStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("LandscapeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Value")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("LandscapeId");

                    b.ToTable("LandscapeStatistics", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Locality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Localities", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.MaterialDestination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("GbifId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("MaterialDestinations", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Municipality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("UfId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UfId");

                    b.ToTable("Municipalities", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Occurrence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsDuplicate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSnucOccurrence")
                        .HasColumnType("boolean");

                    b.Property<int?>("LocalityId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<int?>("OccurrenceMethodId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("OccurrenceTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OccurrenceType")
                        .HasColumnType("integer");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewerObservation")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<int?>("SpecieId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ThreatDegreeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LocalityId");

                    b.HasIndex("OccurrenceMethodId");

                    b.HasIndex("ReferenceId");

                    b.HasIndex("SpecieId");

                    b.HasIndex("ThreatDegreeId");

                    b.ToTable("Occurrences", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.OccurrenceColetaMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ColetaMethods", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.OccurrenceCulture", b =>
                {
                    b.Property<int>("CultureId")
                        .HasColumnType("integer");

                    b.Property<int>("OccurrenceId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Area")
                        .HasColumnType("numeric");

                    b.Property<bool?>("IsMajority")
                        .HasColumnType("boolean");

                    b.Property<int?>("Percentage")
                        .HasColumnType("integer");

                    b.Property<string>("Phenology")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<decimal?>("Productivity")
                        .HasColumnType("numeric");

                    b.Property<string>("Stage")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("CultureId", "OccurrenceId");

                    b.HasIndex("OccurrenceId");

                    b.ToTable("OccurrenceCultures", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Phylum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("KingdomId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("KingdomId");

                    b.ToTable("Phyla", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Reference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("BibtexKey")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("ReferenceTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceTypeId");

                    b.ToTable("References", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.ReferenceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("ReferenceTypes", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.SampleAreaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsSnuc")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("SampleAreaTypes", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Specie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("GenusId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("GenusId");

                    b.ToTable("Species", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.StudyCollectMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CollectEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CollectStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MaterialDestinationId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("integer");

                    b.Property<int?>("SampleDrawing")
                        .HasColumnType("integer");

                    b.Property<decimal?>("SamplingEffort")
                        .HasColumnType("numeric");

                    b.Property<string>("SamplingEffortUnit")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialDestinationId");

                    b.HasIndex("ReferenceId");

                    b.ToTable("StudyCollectMethods", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.ThreatDegree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Classification")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ResolutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Source")
                        .HasColumnType("integer");

                    b.Property<int?>("SpecieId")
                        .HasColumnType("integer");

                    b.Property<int?>("UfId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("SpecieId");

                    b.HasIndex("UfId");

                    b.ToTable("ThreatDegrees", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Uf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .IsFixedLength();

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Ufs", (string)null);
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CountryId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("LandscapeLocality", b =>
                {
                    b.Property<int>("LandscapesId")
                        .HasColumnType("integer");

                    b.Property<int>("LocalitiesId")
                        .HasColumnType("integer");

                    b.HasKey("LandscapesId", "LocalitiesId");

                    b.HasIndex("LocalitiesId");

                    b.ToTable("LandscapeLocality");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Abundance", b =>
                {
                    b.HasOne("BancoDeEspecies.Domain.Models.Landscape", "Landscape")
                        .WithMany("Abundances")
                        .HasForeignKey("LandscapeId");

                    b.HasOne("BancoDeEspecies.Domain.Models.Occurrence", "Occurrence")
                        .WithMany("Abundances")
                        .HasForeignKey("OccurrenceId");

                    b.Navigation("Landscape");

                    b.Navigation("Occurrence");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.BiomeLandscape", b =>
                {
                    b.HasOne("BancoDeEspecies.Domain.Models.Biome", "Biome")
                        .WithMany("BiomeLandscapes")
                        .HasForeignKey("BiomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BancoDeEspecies.Domain.Models.Landscape", "Landscape")
                        .WithMany("BiomeLandscapes")
                        .HasForeignKey("LandscapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Biome");

                    b.Navigation("Landscape");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Class", b =>
                {
                    b.HasOne("BancoDeEspecies.Domain.Models.Phylum", "Phylum")
                        .WithMany("Classes")
                        .HasForeignKey("PhylumId");

                    b.Navigation("Phylum");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Culture", b =>
                {
                    b.HasOne("BancoDeEspecies.Domain.Models.Landscape", "Landscape")
                        .WithMany("Cultures")
                        .HasForeignKey("LandscapeId");

                    b.HasOne("BancoDeEspecies.Domain.Models.CultureSpecie", "Specie")
                        .WithMany("Cultures")
                        .HasForeignKey("SpecieId");

                    b.Navigation("Landscape");

                    b.Navigation("Specie");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.CultureSpecie", b =>
                {
                    b.HasOne("BancoDeEspecies.Domain.Models.Genus", "Genus")
                        .WithMany("CultureSpecies")
                        .HasForeignKey("GenusId");

                    b.Navigation("Genus");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Family", b =>
                {
                    b.HasOne("BancoDeEspecies.Domain.Models.Order", "Order")
                        .WithMany("Families")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Genus", b =>
                {
                    b.HasOne("BancoDeEspecies.Domain.Models.Family", "Family")
                        .WithMany("Genera")
                        .HasForeignKey("FamilyId");

                    b.Navigation("Family");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Kingdom", b =>
                {
                    b.HasOne("BancoDeEspecies.Domain.Models.Domain", "Domain")
                        .WithMany("Kingdoms")
                        .HasForeignKey("DomainId");

                    b.Navigation("Domain");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Landscape", b =>
                {
                    b.HasOne("BancoDeEspecies.Domain.Models.Anthrome", "Anthrome")
                        .WithMany("Landscapes")
                        .HasForeignKey("AnthromeId");

                    b.HasOne("BancoDeEspecies.Domain.Models.Reference", "Reference")
                        .WithMany("Landscapes")
                        .HasForeignKey("ReferenceId");

                    b.HasOne("BancoDeEspecies.Domain.Models.SampleAreaType", "SampleAreaType")
                        .WithMany("Landscapes")
                        .HasForeignKey("SampleAreaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anthrome");

                    b.Navigation("Reference");

                    b.Navigation("SampleAreaType");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.LandscapeAreaType", b =>
                {
                    b.HasOne("BancoDeEspecies.Domain.Models.AreaType", "AreaType")
                        .WithMany("LandscapeAreaTypes")
                        .HasForeignKey("AreaTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BancoDeEspecies.Domain.Models.Landscape", "Landscape")
                        .WithMany("LandscapeAreaTypes")
                        .HasForeignKey("LandscapeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AreaType");

                    b.Navigation("Landscape");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.LandscapeMunicipality", b =>
                {
                    b.HasOne("BancoDeEspecies.Domain.Models.Landscape", "Landscape")
                        .WithMany("LandscapeMunicipalities")
                        .HasForeignKey("LandscapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BancoDeEspecies.Domain.Models.Municipality", "Municipality")
                        .WithMany("LandscapeMunicipalities")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Landscape");

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.LandscapeStatistic", b =>
                {
                    b.HasOne("BancoDeEspecies.Domain.Models.Landscape", "Landscape")
                        .WithMany("LandscapeStatistics")
                        .HasForeignKey("LandscapeId");

                    b.Navigation("Landscape");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Locality", b =>
                {
                    b.HasOne("BancoDeEspecies.Domain.Models.SampleAreaType", "LocalityType")
                        .WithMany("Localities")
                        .HasForeignKey("TypeId");

                    b.Navigation("LocalityType");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Municipality", b =>
                {
                    b.HasOne("BancoDeEspecies.Domain.Models.Uf", "Uf")
                        .WithMany("Municipalities")
                        .HasForeignKey("UfId");

                    b.Navigation("Uf");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Occurrence", b =>
                {
                    b.HasOne("BancoDeEspecies.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BancoDeEspecies.Domain.Models.Locality", "Locality")
                        .WithMany("Occurrences")
                        .HasForeignKey("LocalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BancoDeEspecies.Domain.Models.OccurrenceColetaMethod", "OccurrenceColetaMethod")
                        .WithMany("Occurrences")
                        .HasForeignKey("OccurrenceMethodId");

                    b.HasOne("BancoDeEspecies.Domain.Models.Reference", "Reference")
                        .WithMany("Occurrences")
                        .HasForeignKey("ReferenceId");

                    b.HasOne("BancoDeEspecies.Domain.Models.Specie", "Specie")
                        .WithMany("Occurrences")
                        .HasForeignKey("SpecieId");

                    b.HasOne("BancoDeEspecies.Domain.Models.ThreatDegree", "ThreatDegree")
                        .WithMany("Occurrences")
                        .HasForeignKey("ThreatDegreeId");

                    b.Navigation("Locality");

                    b.Navigation("OccurrenceColetaMethod");

                    b.Navigation("Reference");

                    b.Navigation("Specie");

                    b.Navigation("ThreatDegree");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.OccurrenceCulture", b =>
                {
                    b.HasOne("BancoDeEspecies.Domain.Models.Culture", "Culture")
                        .WithMany("OccurrenceCultures")
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BancoDeEspecies.Domain.Models.Occurrence", "Occurrence")
                        .WithMany("OccurrenceCultures")
                        .HasForeignKey("OccurrenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Culture");

                    b.Navigation("Occurrence");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Order", b =>
                {
                    b.HasOne("BancoDeEspecies.Domain.Models.Class", "Class")
                        .WithMany("Orders")
                        .HasForeignKey("ClassId");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Phylum", b =>
                {
                    b.HasOne("BancoDeEspecies.Domain.Models.Kingdom", "Kingdom")
                        .WithMany("Phyla")
                        .HasForeignKey("KingdomId");

                    b.Navigation("Kingdom");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Reference", b =>
                {
                    b.HasOne("BancoDeEspecies.Domain.Models.ReferenceType", "ReferenceType")
                        .WithMany("References")
                        .HasForeignKey("ReferenceTypeId");

                    b.Navigation("ReferenceType");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Specie", b =>
                {
                    b.HasOne("BancoDeEspecies.Domain.Models.Genus", "Genus")
                        .WithMany("Species")
                        .HasForeignKey("GenusId");

                    b.Navigation("Genus");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.StudyCollectMethod", b =>
                {
                    b.HasOne("BancoDeEspecies.Domain.Models.MaterialDestination", "MaterialDestination")
                        .WithMany("StudyCollectMethods")
                        .HasForeignKey("MaterialDestinationId");

                    b.HasOne("BancoDeEspecies.Domain.Models.Reference", "Reference")
                        .WithMany("StudyCollectMethods")
                        .HasForeignKey("ReferenceId");

                    b.Navigation("MaterialDestination");

                    b.Navigation("Reference");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.ThreatDegree", b =>
                {
                    b.HasOne("BancoDeEspecies.Domain.Models.Country", "Country")
                        .WithMany("ThreatDegrees")
                        .HasForeignKey("CountryId");

                    b.HasOne("BancoDeEspecies.Domain.Models.Specie", "Specie")
                        .WithMany("ThreatDegrees")
                        .HasForeignKey("SpecieId");

                    b.HasOne("BancoDeEspecies.Domain.Models.Uf", "Uf")
                        .WithMany("ThreatDegrees")
                        .HasForeignKey("UfId");

                    b.Navigation("Country");

                    b.Navigation("Specie");

                    b.Navigation("Uf");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Uf", b =>
                {
                    b.HasOne("BancoDeEspecies.Domain.Models.Country", "Country")
                        .WithMany("Ufs")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.User", b =>
                {
                    b.HasOne("BancoDeEspecies.Domain.Models.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("LandscapeLocality", b =>
                {
                    b.HasOne("BancoDeEspecies.Domain.Models.Landscape", null)
                        .WithMany()
                        .HasForeignKey("LandscapesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BancoDeEspecies.Domain.Models.Locality", null)
                        .WithMany()
                        .HasForeignKey("LocalitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Anthrome", b =>
                {
                    b.Navigation("Landscapes");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.AreaType", b =>
                {
                    b.Navigation("LandscapeAreaTypes");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Biome", b =>
                {
                    b.Navigation("BiomeLandscapes");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Class", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Country", b =>
                {
                    b.Navigation("ThreatDegrees");

                    b.Navigation("Ufs");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Culture", b =>
                {
                    b.Navigation("OccurrenceCultures");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.CultureSpecie", b =>
                {
                    b.Navigation("Cultures");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Domain", b =>
                {
                    b.Navigation("Kingdoms");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Family", b =>
                {
                    b.Navigation("Genera");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Genus", b =>
                {
                    b.Navigation("CultureSpecies");

                    b.Navigation("Species");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Kingdom", b =>
                {
                    b.Navigation("Phyla");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Landscape", b =>
                {
                    b.Navigation("Abundances");

                    b.Navigation("BiomeLandscapes");

                    b.Navigation("Cultures");

                    b.Navigation("LandscapeAreaTypes");

                    b.Navigation("LandscapeMunicipalities");

                    b.Navigation("LandscapeStatistics");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Locality", b =>
                {
                    b.Navigation("Occurrences");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.MaterialDestination", b =>
                {
                    b.Navigation("StudyCollectMethods");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Municipality", b =>
                {
                    b.Navigation("LandscapeMunicipalities");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Occurrence", b =>
                {
                    b.Navigation("Abundances");

                    b.Navigation("OccurrenceCultures");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.OccurrenceColetaMethod", b =>
                {
                    b.Navigation("Occurrences");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Order", b =>
                {
                    b.Navigation("Families");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Phylum", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Reference", b =>
                {
                    b.Navigation("Landscapes");

                    b.Navigation("Occurrences");

                    b.Navigation("StudyCollectMethods");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.ReferenceType", b =>
                {
                    b.Navigation("References");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.SampleAreaType", b =>
                {
                    b.Navigation("Landscapes");

                    b.Navigation("Localities");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Specie", b =>
                {
                    b.Navigation("Occurrences");

                    b.Navigation("ThreatDegrees");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.ThreatDegree", b =>
                {
                    b.Navigation("Occurrences");
                });

            modelBuilder.Entity("BancoDeEspecies.Domain.Models.Uf", b =>
                {
                    b.Navigation("Municipalities");

                    b.Navigation("ThreatDegrees");
                });
#pragma warning restore 612, 618
        }
    }
}
